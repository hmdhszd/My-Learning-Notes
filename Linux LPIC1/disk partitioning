fdisk /dev/sda


Help:

  Generic
   d   delete a partition
   F   list free unpartitioned space
   l   list known partition types
   n   add a new partition
   p   print the partition table
   t   change a partition type
   v   verify the partition table
   i   print information about a partition

  Save & Exit
   w   write table to disk and exit
   q   quit without saving changes

  Create a new label
   g   create a new empty GPT partition table
   G   create a new empty SGI (IRIX) partition table
   o   create a new empty DOS partition table
   s   create a new empty Sun partition table



---------------------------------------------------------------------------------------------
MBR    limited   2TB


Primary, Extended & Logical Partitions
The partition table is located in the master boot record (MBR) of a disk. The MBR is the first sector on the disk, so the partition table is not a very large part of it. This limits the primary partitions to 4 and the max size of a disk to around 2TBs. If you need more partitions you have a define one extended and then create logicals inside them.

Linux numbers the primary partitions 1, 2, 3 & 4. If you define an extended partitions, logical partitions inside it will be called 5, 6, 7.



So:

/dev/sda3 is the 3rd primary partition on the first disk
/dev/sdb5 is the first logical partition on the second disk
/dev/sda7 is the 3rd logical partition of the first physical disk









The newer GUID Partition Table (or GPT) solves this problems. If you format your disk with GTP you can have 128 primary partitions (no need to extended and logical).



---------------------------------------------------------------------------------------------


show partitions:



sudo parted /dev/sda p
Model: ATA ST320LT000-9VL14 (scsi)
Disk /dev/sda: 320GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Disk Flags: 

Number  Start   End     Size    Type      File system     Flags
 1      1049kB  22.1GB  22.1GB  primary   ext4            boot
 2      22.1GB  47.1GB  25.1GB  primary   ext4
 3      47.1GB  320GB   273GB   extended
 5      47.1GB  55.1GB  7999MB  logical   linux-swap(v1)
 6      55.1GB  320GB   265GB   logical


gparted     ->    graphical parted



---------------------------------------------------------------------------------------------




LVM

for resize your partitions or even add new disks and add them to your mount points



LVM helps you create one partition from different disks and add or remove space to them. The main concepts are:

-Physical Volume (pv): a whole drive or a partition. It is better to define partitions and not use whole disks - unpartitioned.

-Volume Groups (vg): this is the collection of one or more pvs. OS will see the vg as one big disk. PVs in one vg, can have different sizes or even be on different physical disks.

-Logical Volumes (lv): OS will see lvs as partitions. You can format an lv wit your OS and use it.




---------------------------------------------------------------------------------------------



show hard devices:

▶ ls -l /dev/loop1  /dev/sd[a-z] 
brw-rw---- 1 root disk 7, 1 Mar 10 10:17 /dev/loop1
brw-rw---- 1 root disk 8, 0 Mar 10 19:54 /dev/sda


b = block device


---------------------------------------------------------------------------------------------




▶ sudo fdisk -l /dev/sda

Disk /dev/sda: 111.8 GiB, 120034123776 bytes, 234441648 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 18EF759B-93D3-4A22-9343-2C86F79A7BA1

Device       Start       End   Sectors   Size Type
/dev/sda1     2048   1050623   1048576   512M EFI System
/dev/sda2  1050624 234440703 233390080 111.3G Linux filesystem




---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------



[root@localhost ~]# fdisk /dev/sdb





Command action
   a   toggle a bootable flag
   b   edit bsd disklabel
   c   toggle the dos compatibility flag
   d   delete a partition
   g   create a new empty GPT partition table
   G   create an IRIX (SGI) partition table
   l   list known partition types
   m   print this menu
   n   add a new partition
   o   create a new empty DOS partition table
   p   print the partition table
   q   quit without saving changes
   s   create a new empty Sun disklabel
   t   change a partition's system id
   u   change display/entry units
   v   verify the partition table
   w   write table to disk and exit
   x   extra functionality (experts only)




---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------


Create a new partition:








Command (m for help): n

Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): p

Partition number (1-4, default 1): 
First sector (2048-16777215, default 2048): 
Using default value 2048

Last sector, +sectors or +size{K,M,G} (2048-16777215, default 16777215): +1G
Partition 1 of type Linux and of size 1 GiB is set




---------------------------------------------------------------------------------------------





Command (m for help): p

Disk /dev/sdb: 8589 MB, 8589934592 bytes, 16777216 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0xd7e73d9d

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            2048     2099199     1048576   83  Linux





---------------------------------------------------------------------------------------------



change partitoin type:


Command (m for help): t
Selected partition 1
Hex code (type L to list all codes): b



Changed type of partition 'Linux' to 'W95 FAT32'





   w   write table to disk and exit












format the partition:


[root@localhost ~]# mkfs -t ext3 /dev/sdb

or

[root@localhost ~]# mkfs.ext3 /dev/sdb


---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------


make swap:


[root@localhost ~]# mkswap -f /dev/sdb



---------------------------------------------------------------------------------------------




[root@localhost ~]# blkid
/dev/sda1: UUID="586cafb4-de98-44f1-ac50-f619d4a71d23" TYPE="xfs" 
/dev/sda2: UUID="bjtm1h-IH4B-8dXy-VsUj-cQhq-SJ51-LVHAz2" TYPE="LVM2_member" 
/dev/sdb: UUID="59074182-fc08-4f1e-b2bd-f196fe00765b" TYPE="swap" 
/dev/mapper/centos-root: UUID="923b437c-6b1e-4eb7-bb8d-6adbc5577318" TYPE="xfs" 
/dev/mapper/centos-swap: UUID="9cc897a2-b4f7-4c6c-aac4-f737c92f56a3" TYPE="swap" 




---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------



Control mounting and unmounting of filesystems


---------------------------------------------------------------------------------------------



show all mounted file systems:



                                                                                                                                        ⍉
▶ mount

sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
udev on /dev type devtmpfs (rw,nosuid,relatime,size=4005680k,nr_inodes=1001420,mode=755)
devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)
tmpfs on /run type tmpfs (rw,nosuid,noexec,relatime,size=807348k,mode=755)
/dev/sda2 on / type ext4 (rw,relatime,errors=remount-ro,data=ordered)
/dev/sda1 on /boot/efi type vfat (rw,relatime,fmask=0077,dmask=0077,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro)
tmpfs on /run/user/1000 type tmpfs (rw,nosuid,nodev,relatime,size=807344k,mode=700,uid=1000,gid=1000)
gvfsd-fuse on /run/user/1000/gvfs type fuse.gvfsd-fuse (rw,nosuid,nodev,relatime,user_id=1000,group_id=1000)
/dev/fuse on /run/user/1000/doc type fuse (rw,nosuid,nodev,relatime,user_id=1000,group_id=1000)






---------------------------------------------------------------------------------------------



Mount and UnMount:


▶ mount /dev/sda1 /media


▶ umount /media




---------------------------------------------------------------------------------------------




Mount Readonly:


▶ mount -o ro /dev/sda1 /media



-o         option


---------------------------------------------------------------------------------------------




Mount Read/Write:


▶ mount -o rw /dev/sda1 /media

▶ mount -o remount,rw /dev/sda1 /media





---------------------------------------------------------------------------------------------



Unmount when    device is busy   :


lsof   ->     lsopenfiles




Method 1: use lsof
The following command finds out the processes accessing the partition/filesystem. You need to run the following command as root. Here, we use the mount point /mnt/data as an example.




# lsof | grep '/mnt/data'



It will output lines like:       



bash  17622  user1 cwd   DIR    253,2  4096  2 /mnt/data



you may kill them by kill or kill -9. After the processes are killed, the filesystem will be able to be unmounted.










Method 2: use fuser
You can find out the processes using a filesystem (e.g. /mnt/data) by


# fuser /mnt/data
fuser can also help you kill all processes using a filesystem at the same time by

# fuser -k /mnt/data
or

# fuser -k -9 /mnt/data
Then you can continue to umount the filesystem.







---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------




Bootup

/etc/fstab

    file system: Label, UUID, device
    mount point: swap or none for swap
    type: can be auto
    options: defaults, rw / ro, noauto, user, exec / noexec, noatime
    dump: do dump command backup this? mostly 0
    pass: Non-zero values of pass specify the order of checking filesystems at boot time (seen in Integrity of file systems)




user 							user can mount without root access
noauto 							don't mount at startup
noexec 							user can't run exec file
errors=remount-ro				if it has errors, remount and readonly






▶ cat /etc/fstab
# /etc/fstab: static file system information.

# <file system> <mount point>   <type>  <options>       <dump>  <pass>

UUID=81017340-62d4-40d0-90a0-1484134bf70d 	/               ext4    errors=remount-ro 0       1

UUID=0CF0-35D1  							/boot/efi       vfat    umask=0077      0       1
/swapfile                                 none            swap    sw              0       0




---------------------------------------------------------------------------------------------



add a line int fstab :


/dev/sdb1		/mnt/hamid/myUSB		user,ro 	0 		0





▶ mkdir /mnt/hamid/myUSB



---------------------------------------------------------------------------------------------



                                                                                                                                           
▶ blkid

/dev/sda1: UUID="0CF0-35D1" TYPE="vfat" PARTLABEL="EFI System Partition" PARTUUID="1f8db139-f219-4559-b244-cdee6253f751"

/dev/sda2: UUID="81017340-62d4-40d0-90a0-1484134bf70d" TYPE="ext4" PARTUUID="22b49831-d2a5-4760-af0d-14f097e21bb5"






---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------


turn on/off swap:


# swapoff -a

# swapon -a





show swap info:


hamid# swapon -s

Filename				Type		Size	Used	Priority
/swapfile             	file    	2097148	1217952	-2

















---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------




Boot-up automatic mounting





[root@localhost ~]# blkid /dev/sdb1
/dev/sdb1: UUID="70fe44b9-51a8-4c1c-84e8-c8330da5a4f1" TYPE="ext3"






Then edit /etc/fstab and add a line at the end:




UUID=f04214a3-2dba-4d20-827d-d3f03e2f4eed /data2 ext3 defaults 1 1