



docker create vs docker run:


The docker run command creates a container from a given image and starts the container



The docker create command creates a container from a given image and BUT does NOT starts the container

we should start it with "docker start" command




----------------------------------------------------------------------------------------





[root@localhost ~]# docker run --help 



  -d, --detach                         Run container in background and print container ID



[root@localhost ~]# docker run -d busybox
6c3e55a7f2fe83ff67c64e8ec237056ad7e18be48fdd2ab86c334e271f74ebd3



----------------------------------------------------------------------------------------




  -e, --env list                       Set environment variables



[root@localhost ~]# docker run -e PASSWORD=123 mysql




----------------------------------------------------------------------------------------




[root@localhost ~]# docker run --help 

      --env-file list                  Read in a file of environment





[root@localhost ~]# docker run --env-file ./my_env ubuntu




----------------------------------------------------------------------------------------




[root@localhost ~]# docker run --help 

  -h, --hostname string                Container host name


[root@localhost ~]# docker run -d --hostname=WEB httpd
75cdb189f9a56430c37e28a87bcca14118938a9d7ddb7bd9d27dce5fe29a89d4




----------------------------------------------------------------------------------------




[root@localhost ~]# docker run --help 

    --name string                    Assign a name to the container





[root@localhost ~]# docker run -d --name=MyWebServer httpd

119a1ee07126696b37544bc9399b2c551d3c7cc838dc68c2269972963bb180ca




[root@localhost ~]# docker ps

CONTAINER ID   IMAGE     COMMAND              CREATED         STATUS         PORTS     NAMES
119a1ee07126   httpd     "httpd-foreground"   5 seconds ago   Up 4 seconds   80/tcp    MyWebServer




----------------------------------------------------------------------------------------



Remove all containers:



[root@localhost ~]# docker rm -f $(docker ps -a -q)
119a1ee07126
75cdb189f9a5
d62c4f787c6b
25ca5f2d3f4e
6c3e55a7f2fe
f66e7f1d650a
02aa5cf716a2
047cc213055a
faae83ce7e6d
26cf594e10c3
23d8f8f27c0a




[root@localhost ~]# docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES








Remove a specific container:



[root@localhost ~]# docker rm -f TestName
TestName


[root@localhost ~]# docker ps 
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES




----------------------------------------------------------------------------------------




Get a bash from container:


[root@localhost ~]# docker run --help 

  -i, --interactive                    Keep STDIN open even if not attached

  -t, --tty                            Allocate a pseudo-TTY





[root@localhost ~]# docker run -d --name=TestName --hostname=TestHostName -it httpd
ea233171675f5c45957fc75a1e6334296120d69a6af981a9783b087500e666c7




[root@localhost ~]# docker ps 
CONTAINER ID   IMAGE     COMMAND              CREATED         STATUS         PORTS     NAMES
ea233171675f   httpd     "httpd-foreground"   7 seconds ago   Up 5 seconds   80/tcp    TestName



[root@localhost ~]# docker exec -it TestName bash
root@TestHostName:/usr/local/apache2# 




----------------------------------------------------------------------------------------



docker network connect

[root@localhost ~]# docker run --help 

    --link list                      Add link to another container




[root@localhost ~]# docker run -d -P  --link  nimmis/apache-php7  rabbitmq redis 




----------------------------------------------------------------------------------------



add ip to container:



[root@localhost ~]# docker run --help


      --ip string                      IPv4 address (e.g., 172.30.100.104)







[root@localhost ~]# docker network create --subnet=172.18.0.0/16 mynet123
23ba33c7c28809f44bd3e2e0203c1f1b72c7f086c75d048294a7bffbcd5c9e3b



[root@localhost ~]# docker run --net mynet123 --ip 172.18.0.22 -it httpd bash


root@a961fb77764f:/usr/local/apache2# ip addr






----------------------------------------------------------------------------------------





Map port from container to host:


[root@localhost ~]# docker run --help


  -p, --publish list                   Publish a container's port(s) to
                                       the host
  -P, --publish-all                    Publish all exposed ports to
                                       random ports





[root@localhost ~]# docker run -d -p 3306:3306 httpd

[root@localhost ~]# docker run -d -p 127.0.0.1:3306:3306 httpd






----------------------------------------------------------------------------------------






[root@localhost ~]# docker run --help 
      --restart string                 Restart policy to apply when a container exits (default "no")





[root@localhost ~]# docker update --restart unless-stopped redis

[root@localhost ~]# docker update --restart=always unless-stopped redis



----------------------------------------------------------------------------------------





[root@localhost ~]# docker run --help

  -v, --volume list                    Bind mount a volume





[root@localhost ~]# docker container run -it -v /home/hamid/Desktop/data:/var/lib/mysql -P mysql:latest









----------------------------------------------------------------------------------------






[root@localhost ~]# docker run  --help | grep rm

      --rm                             Automatically remove the container when it exits





[root@localhost ~]# docker run  --rm busybox



